{
    "collab_server" : "",
    "contents" : "#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    http://shiny.rstudio.com/\n#\n\nlibrary(geosphere)\nlibrary(data.table)\nlibrary(shiny)\nlibrary(leaflet)\nlibrary(rgdal)\nlibrary(readr)\nlibrary(spatstat)\nlibrary(maptools)\nlibrary(raster)\nlibrary(dplyr)\nlibrary(REAT)\nlibrary(RColorBrewer)\nlibrary(classInt)\n\n#r_colors <- rgb(t(col2rgb(colors()) / 255))\n#names(r_colors) <- colors()\n\nui <- fluidPage(\n  titlePanel(\"Accessibility Visualisation Tool by Acces(S)ingapore\"),\n  \n  # Sidebar with a slider input for number of bins\n  sidebarLayout(\n    sidebarPanel(\n      checkboxGroupInput(\"layers\",\n                         \"Toggle layers to be displayed:\",\n                         c(\"SingPost Outlets\" = \"singpost\", \"Kernel Density\" = \"kde\", \"Buffer Analysis\" = \"buffer\")),\n      radioButtons(\"stats\",\n                   \"Toggle statistics to be displayed:\",\n                   c(\"None selected\" = \"\", \"Hansen Accessibility\" = \"hansen\", \"Road Distance between Origin and Destination\" = \"huff\")),\n      selectInput('POI', \n                  'Select point of interest:', \n                  c(Choose='','SingPost Offices'=\"www/default/Singpost_Locations.csv\", 'Office Buildings'=\"www/default/Office Locations.csv\", 'Private Housing'=\"www/default/Geocoded_PrivateHousing.csv\",'SCDF Ambulances'),\n                  selectize=FALSE),\n      br(),\n      fileInput('userfiles',\n                \"Select file to upload for analysis (maximum 1000 rows for Hansen):\"),\n      selectInput('origin', \n                  'Select origin locations:', \n                  c(Choose='','Office Buildings'=\"www/default/Office Locations.csv\",list.files(pattern=\"user_\")),\n                  selectize=FALSE),\n      selectInput('dest', \n                  'Select destination locations:', \n                  c(Choose='','SingPost Offices'=\"www/default/Singpost_Locations.csv\",'SCDF Ambulances'),\n                  selectize=FALSE),\n      actionButton(\"update\", \"Update Graph\"),\n      actionButton(\"updatestats\", \"Update Stats\"),\n      br(),\n      sliderInput(\"travelt\",\n                  \"Driving distance to judge accessibility (minuetes):\",\n                  min = 1,\n                  max = 60,\n                  value = 15),\n      sliderInput(\"dist\",\n                  \"Distance to judge accessibility (m):\",\n                  min = 100,\n                  max = 2000,\n                  value = 500,\n                  step = 25)\n    ),\n    \n    # Show a plot of the generated distribution\n    mainPanel(\n      leafletOutput(\"mymap\"),\n      p(),\n      h4('Statistics:'),\n      plotOutput('histplot'),\n      h4('List of uploaded files:'),\n      verbatimTextOutput('fileList'),\n      h4('Errors:'),\n      verbatimTextOutput('errorList')\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  coast <- readShapePoly(\"www/Shapefiles/CoastalOutline.shp\")\n  coast_sd <- as(coast, \"SpatialPolygons\")\n  W <- as(coast_sd, \"owin\")\n  \n  # loads SingPost locations into spatial points data frame\n  SingPost <- read_csv(\"www/default/Singpost_Locations.csv\")\n  coordinates(SingPost) <- c(\"X-COORDINATES\",\"Y-COORDINATES\")\n  proj4string(SingPost) <- CRS(\"+init=epsg:3414\")\n  longlat.df <- as.data.frame(spTransform(SingPost,CRS(\"+proj=longlat\")))\n  SingPost$LONGITUDE <- longlat.df$X.COORDINATES\n  SingPost$LATITUDE <- longlat.df$Y.COORDINATES\n  \n  SingPost.df <- as.data.frame(SingPost)\n  \n  # default map\n  icons <- awesomeIcons(\n    icon = 'fa-envelope-square',\n    iconColor = 'black',\n    library = 'fa',\n    markerColor = 'darkblue'\n  )\n  output$mymap <- renderLeaflet({\n    leaflet() %>% addTiles() %>%\n      setView(103.8509, 1.2800, zoom = 10) %>%\n      addAwesomeMarkers(data=SingPost.df, icon=icons, group=\"singpost\")\n  })\n  \n  observeEvent(input$update, {\n    leafletProxy(\"mymap\") %>% clearGroup(\"KDE\")\n    check = 1\n    if (input$POI == \"choose\" &&  (is.null(input$layers))) {\n      output$errorList <- renderText({\"Please choose a point of interest and an analysis method\"})\n      check = 2\n    }else if (is.null(input$layers) ) {\n      output$errorList <-  renderText({\"Please choose an analysis method\"})\n      check = 2\n    }else if (input$POI == \"choose\" ){\n      output$errorList <-  renderText({\"Please choose a point of interest\"})\n      check = 2\n    }\n    \n    if(check == 2){\n      return (NULL)\n    }\n    \n    if (\"kde\" %in% input$layers && input$POI != \"choose\") {\n      #clear off previous result \n      leafletProxy(\"mymap\") %>% clearGroup(\"KDE\")\n      output$errorList <-  renderText({\"\"})\n      \n      originPt <- read_csv(input$POI)\n      originPt[originPt==\"\"] <- NA\n      originPt <- na.omit(originPt)\n      coordinates(originPt) <- c(\"X-COORDINATES\",\"Y-COORDINATES\")\n      proj4string(originPt) <- CRS(\"+init=epsg:3414\")\n      originlonglat.df <- as.data.frame(spTransform(originPt,CRS(\"+proj=longlat\")))\n      originPt$LONGITUDE <- originlonglat.df$X.COORDINATES\n      originPt$LATITUDE <- originlonglat.df$Y.COORDINATES\n      originPt_sp <- as(originPt, \"SpatialPoints\")\n      originPt_ppp <- as(originPt_sp, \"ppp\")[W]\n      kde_originPt_1000 <- density(originPt_ppp,1000)\n      kde_raster <<- raster(kde_originPt_1000)\n      projection(kde_raster) <<- projection(SingPost)\n      leafletProxy(\"mymap\") %>%\n        addRasterImage(kde_raster, opacity = 0.5,group =\"KDE\") %>%\n        showGroup(\"KDE\")\n    }\n  })\n  \n  observeEvent(input$updatestats, {\n    if (input$stats == \"hansen\" && input$origin != \"choose\" && input$dest != \"choose\") {\n      #clear off previous result\n      leafletProxy(\"mymap\") %>% clearGroup(\"stats\")\n      \n      print (\"YES\")\n      originPt <- read_csv(input$origin)\n      destPt <- read_csv(input$dest)\n      \n      # check for empty values\n      originPt[originPt==\"\"] <- NA\n      originPt <- na.omit(originPt)\n      destPt[destPt==\"\"] <- NA\n      destPt <- na.omit(destPt)\n      \n      # sets XY coordinates & projection \n      coordinates(originPt) <- c(\"X-COORDINATES\",\"Y-COORDINATES\")\n      coordinates(destPt) <- c(\"X-COORDINATES\",\"Y-COORDINATES\")\n      proj4string(originPt) <- CRS(\"+init=epsg:3414\")\n      proj4string(destPt) <- CRS(\"+init=epsg:3414\")\n      \n      # converts XY coordinates to LongLat coordinates\n      originlonglat.df <- as.data.frame(spTransform(originPt,CRS(\"+proj=longlat\")))\n      destlonglat.df <- as.data.frame(spTransform(destPt,CRS(\"+proj=longlat\")))\n      originPt$LONGITUDE <- originlonglat.df$X.COORDINATES\n      originPt$LATITUDE <- originlonglat.df$Y.COORDINATES\n      destPt$LONGITUDE <- destlonglat.df$X.COORDINATES\n      destPt$LATITUDE <- destlonglat.df$Y.COORDINATES\n      \n      originPt_df <- as.data.frame(originPt)\n      destPt_df <- as.data.frame(destPt)\n      \n      distmat <- dist.mat(originPt_df, \"POSTAL\", \"LATITUDE\", \"LONGITUDE\", destPt_df, \"POSTAL\", \"LATITUDE\", \"LONGITUDE\", unit = \"km\")\n      hansen_output <- hansen(distmat,\"from\",\"to\",attrac=1,\"distance\",gamma=1, lambda=-2,dtype=\"exp\",accnorm=\"TRUE\")\n      originPt_df <- left_join(originPt_df,hansen_output,by=c(\"POSTAL\"=\"from\"))\n      \n      output$histplot <- renderPlot({\n        x <- originPt_df$accessibility\n        hist(x,breaks=6)\n      })\n      \n      originPt_df$info <- paste0(\"Accessibility: \", round(originPt_df$accessibility,3))\n      \n      pal <- brewer.pal(11,\"Spectral\")\n      pal <- colorRampPalette(pal)\n      palData <- classIntervals(originPt_df$accessibility,style=\"jenks\")\n      originPt_df$colors <- findColours(palData, pal(100))\n      \n      leafletProxy(\"mymap\") %>%\n        clearGroup(\"singpost\") %>%\n        addCircleMarkers(opacity = 1, data = originPt_df, color = ~colors, popup = ~info, group =\"stats\")\n      #  %>%\n      #  addLegend(\"bottomright\", pal = palData, values = ~accessibility, title = \"Hansen Accessibility\")\n    }\n    else {\n      leafletProxy(\"mymap\") %>% clearGroup(\"stats\")\n    }\n  })\n      \n      # updates SelectInput when user uploads a new file\n      observeEvent(input$userfiles, {  \n        if (is.null(input$userfiles)) {    return(NULL)  }  \n        file.copy(from = input$userfiles$datapath, to =  paste0('user_',input$userfiles$name )  ) \n        isolate(updateSelectInput(session,\"POI\",choices = c('SingPost Offices', 'Private Housing', list.files(pattern='user_'))))\n        isolate(updateSelectInput(session,\"origin\",choices = c('SingPost Offices', 'Private Housing', list.files(pattern='user_'))))\n        isolate(updateSelectInput(session,\"dest\",choices = c('SingPost Offices', 'Private Housing', list.files(pattern='user_'))))\n      })\n      \n      output$fileList <- renderText({   \n        input$userfiles\n        dir(pattern = 'user_') \n      })\n      \n}\n\nshinyApp(ui, server)\n",
    "created" : 1491633540348.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3163438108",
    "id" : "CB453AED",
    "lastKnownWriteTime" : 1491958728,
    "last_content_update" : 1491958728196,
    "path" : "C:/Users/Joanne Tan/Dropbox/Year 4/IS415 Geospatial Analysis for Business Intelligence/geospatial-/app.R",
    "project_path" : "app.R",
    "properties" : {
        "docOutlineVisible" : "0",
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}